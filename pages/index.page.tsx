import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useForm } from '@mantine/form'
import { Box, Button, Container, Stack, Text, Textarea } from '@mantine/core'
import { useOpenAiQuery } from '@/react-query/useOpenAiQuery'
import { ChatCompletionResponseMessage } from 'openai'
import { KeyboardEventHandler, useRef, useState } from 'react'
import { Message } from './components/message'
import { codeSnippetsFormattingInstructionMessage } from '@/instructions/instructions'
import { WrappedMessage } from '@/types'

const wrapInWrappedMessage = (
  message: ChatCompletionResponseMessage,
  hidden = false
) => ({
  message: message,
  hidden,
})

export default function Home() {
  const { mutateAsync: sendMessages } = useOpenAiQuery()

  const [wrappedMessages, setWrappedMessages] = useState<WrappedMessage[]>([
    codeSnippetsFormattingInstructionMessage,
  ])

  const form = useForm({
    initialValues: {
      prompt: '',
    },
  })

  const handleButtonClick = async () => {
    if (form.values.prompt.trim().length === 0) return

    const wrappedMessage = wrapInWrappedMessage({
      content: form.values.prompt,
      role: 'user',
    })
    form.setFieldValue('prompt', '')

    wrappedMessages.push(wrappedMessage)
    const responseMessages = await sendMessages(wrappedMessages)
    const newMessage = responseMessages[responseMessages.length - 1]
    setWrappedMessages((old) =>
      newMessage != null ? [...old, wrapInWrappedMessage(newMessage)] : old
    )
  }

  const handleClear = () => {
    setWrappedMessages([])
  }

  const mantineButtonRef = useRef<HTMLButtonElement>(null)

  const handleKeyPress: KeyboardEventHandler<HTMLTextAreaElement> = (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      mantineButtonRef.current?.click()
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Container sx={{ width: '100%' }} size="md">
          <Box component="form" onSubmit={form.onSubmit(handleButtonClick)}>
            <Stack>
              <Stack spacing={4}>
                {wrappedMessages
                  .map((wrappedMessage, index) => {
                    if (wrappedMessage.hidden) return null
                    return (
                      <Message wrappedMessage={wrappedMessage} key={index} />
                    )
                  })
                  .filter(Boolean)}
              </Stack>

              <Textarea
                //
                label="Prompt"
                styles={{
                  input: {
                    fontSize: '.9rem',
                  },
                }}
                {...form.getInputProps('prompt')}
                placeholder="Send a message..."
                onKeyDown={handleKeyPress}
              />

              <Button
                //
                ref={mantineButtonRef}
                type="submit"
                color="success"
              >
                Submit
              </Button>

              <Text
                onClick={handleClear}
                c="gray20"
                component="a"
                align="center"
                size="sm"
                fw="bold"
                sx={{
                  cursor: 'pointer',
                  '&:hover': {
                    textDecoration: 'underline',
                  },
                }}
              >
                Clear conversation
              </Text>
            </Stack>
          </Box>
        </Container>
      </main>
    </>
  )
}
